Given preorder and inorder traversal of a tree, construct the binary tree.

 Note: You may assume that duplicates do not exist in the tree. 
Example :

Input :
        Preorder : [1, 2, 3]
        Inorder  : [2, 1, 3]

Return :
            1
           / \
          2   3


/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
TreeNode * buildTreeUtil(vector<int> & preorder,vector<int> &inorder, int& preorderindex, int startI,int endI){

if(startI>endI)return NULL;

if(preorderindex>=preorder.size())
    return NULL;

int value=preorder[preorderindex];  
TreeNode *root=new TreeNode(value);
int mid=INT_MAX;
for(int i=startI;i<=endI;i++)
{
    if(inorder[i]==value)
    {
     mid=i;
      break;
    }
}

preorderindex++;
  root->left=buildTreeUtil(preorder,inorder,preorderindex,startI,mid-1);
  root->right=buildTreeUtil(preorder,inorder,preorderindex,mid+1,endI);
  
  return root;

} 


TreeNode* Solution::buildTree(vector<int> &A, vector<int> &B) {
    
    int preorderindex=0;
   return buildTreeUtil(A,B,preorderindex,0,B.size()-1); 
}
