#####################################################

Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2 ).

You are given a target value to search. If found in the array, return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Input : [4 5 6 7 0 1 2] and target = 4
Output : 0



***********************************************************


int Solution::search(const vector<int> &A, int B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details

    int low=0;
    int high=A.size() -1;
    
    while(low<=high)
    {
        
        int mid=(high-low)/2 +low;
        
        if(A[mid]==B) return mid;
        
        if(A[0]<=A[mid])
        {
            //left array is sorted check if i can find b in left side
            if(B>=low && B<A[mid])high=mid-1;
            
            else low=mid+1;
        }
        else
        {
            if(B>A[mid] &&B<=A[A.size()-1]) low=mid+1;
            
            else  high=mid-1;
        }
        
    }
    
    return -1;
    
  
    
}
