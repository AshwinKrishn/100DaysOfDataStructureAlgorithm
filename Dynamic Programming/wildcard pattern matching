Problem statement:
Implement wildcard pattern matching with support for '?' and '*'.

'?' : Matches any single character.
'*' : Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

The function prototype should be:

int isMatch(const char *s, const char *p)
Examples :

isMatch("aa","a") → 0
isMatch("aa","aa") → 1
isMatch("aaa","aa") → 0
isMatch("aa", "*") → 1
isMatch("aa", "a*") → 1
isMatch("ab", "?*") → 1
isMatch("aab", "c*a*b") → 0
Return 1/0 for this problem.

https://www.interviewbit.com/problems/regular-expression-match/
#######################################################
int Solution::isMatch(const string str, const string pat) {
 
 int rows=str.length();
 int cols=pat.length();
 
 vector<vector<bool>> dp(rows+1, vector<bool>(cols+1,false));
 
 for(int i=0;i<=rows;i++)
   for(int j=0;j<=cols;j++)
     {
         if(i==0 && j==0)
          {
              dp[i][j]=true;
              continue;
          }
          
         if(j==0)continue;
       
          
          if(i==0)
          {
              if(pat[j-1]=='*')
                dp[i][j]=dp[i][j-1];
                
          continue;        
          }
          
          if(str[i-1]==pat[j-1] || pat[j-1]=='?')
            dp[i][j]=dp[i-1][j-1];
            
          else{
              if(pat[j-1]=='*')
                dp[i][j]= dp[i][j-1] || dp[i-1][j];
          }    
         
     }
     
     return dp[rows][cols];
 }
